{"version":3,"sources":["drum_button.jsx","App.jsx","serviceWorker.js","index.js"],"names":["DrumButton","state","selected","src","handleKeyPress","event","key","_this","props","keypad","toLowerCase","select","handleKeyUp","deselect","setState","playSound","_audio","load","play","document","addEventListener","this","_this2","react_default","a","createElement","className","concat","onMouseDown","onMouseUp","tabIndex","ref","React","Component","App","console","log","refs","drum_button_DrumButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uKAGqBA,mNACnBC,MAAQ,CACNC,SAAU,GACVC,IAAK,MASPC,eAAiB,SAAAC,GACXA,EAAMC,MAAQC,EAAKC,MAAMC,OAAOC,eAClCH,EAAKI,YAITC,YAAc,SAAAP,GACRA,EAAMC,MAAQC,EAAKC,MAAMC,OAAOC,eAClCH,EAAKM,cAITF,OAAS,WACPJ,EAAKO,SAAS,CAAEZ,SAAU,aAC1BK,EAAKQ,eAGPF,SAAW,WACTN,EAAKO,SAAS,CAAEZ,SAAU,QAG5Ba,UAAY,WACVR,EAAKS,OAAOC,OACZV,EAAKS,OAAOE,2FA5BZC,SAASC,iBAAiB,UAAWC,KAAKjB,gBAC1Ce,SAASC,iBAAiB,QAASC,KAAKT,aACxCS,KAAKP,SAAS,CAACX,IAAKkB,KAAKb,MAAML,uCA6BxB,IAAAmB,EAAAD,KACP,OACEE,EAAAC,EAAAC,cAAA,OACEC,UAAS,wBAAAC,OAA0BN,KAAKpB,MAAMC,UAC9C0B,YAAaP,KAAKV,OAClBkB,UAAWR,KAAKR,SAChBiB,SAAS,MAETP,EAAAC,EAAAC,cAAA,SACEtB,IAAKkB,KAAKpB,MAAME,IAChB4B,IAAK,SAACP,GAAD,OAAOF,EAAKN,OAASQ,KAE3BH,KAAKb,MAAMC,eAlDoBuB,IAAMC,YCmD/BC,mLA/CX,OADAC,QAAQC,IAAIf,KAAKgB,MAEfd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAACa,EAAD,CACE7B,OAAQ,IACRN,IAAK,6DAEPoB,EAAAC,EAAAC,cAACa,EAAD,CACE7B,OAAQ,IACRN,IAAK,6DAEPoB,EAAAC,EAAAC,cAACa,EAAD,CACE7B,OAAQ,IACRN,IAAK,6DAEPoB,EAAAC,EAAAC,cAACa,EAAD,CACE7B,OAAQ,IACRN,IAAK,2DAEPoB,EAAAC,EAAAC,cAACa,EAAD,CACE7B,OAAQ,IACRN,IAAK,+DAEPoB,EAAAC,EAAAC,cAACa,EAAD,CACE7B,OAAQ,IACRN,IAAK,+DAEPoB,EAAAC,EAAAC,cAACa,EAAD,CACE7B,OAAQ,IACRN,IAAK,2DAEPoB,EAAAC,EAAAC,cAACa,EAAD,CACE7B,OAAQ,IACRN,IAAK,iEAEPoB,EAAAC,EAAAC,cAACa,EAAD,CACE7B,OAAQ,IACRN,IAAK,sEAzCD8B,aCQEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAAS3B,SAAS4B,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.17dfbe9f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nexport default class DrumButton extends React.Component {\r\n  state = {\r\n    selected: \"\",\r\n    src: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.addEventListener(\"keydown\", this.handleKeyPress);\r\n    document.addEventListener(\"keyup\", this.handleKeyUp);\r\n    this.setState({src: this.props.src});\r\n  }\r\n\r\n  handleKeyPress = event => {\r\n    if (event.key === this.props.keypad.toLowerCase()) {\r\n      this.select();\r\n    }\r\n  };\r\n\r\n  handleKeyUp = event => {\r\n    if (event.key === this.props.keypad.toLowerCase()) {\r\n      this.deselect();\r\n    }\r\n  };\r\n\r\n  select = () => {\r\n    this.setState({ selected: \"selected\" });\r\n    this.playSound();\r\n  };\r\n\r\n  deselect = () => {\r\n    this.setState({ selected: \"\" });\r\n  };\r\n\r\n  playSound = () => {\r\n    this._audio.load();\r\n    this._audio.play();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className={`drum-button noselect ${this.state.selected}`}\r\n        onMouseDown={this.select}\r\n        onMouseUp={this.deselect}\r\n        tabIndex=\"-1\"\r\n      >\r\n        <audio\r\n          src={this.state.src}\r\n          ref={(a) => this._audio = a}\r\n        />\r\n        {this.props.keypad}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport DrumButton from \"./drum_button\";\n\nclass App extends Component {\n  render() {\n    console.log(this.refs)\n    return (\n      <div className=\"App\">\n        <div className=\"controller\">\n          <div className=\"button-grid\">\n            <DrumButton\n              keypad={\"Q\"}\n              src={\"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\"}\n            />\n            <DrumButton\n              keypad={\"W\"}\n              src={\"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\"}\n            />\n            <DrumButton\n              keypad={\"E\"}\n              src={\"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\"}\n            />\n            <DrumButton\n              keypad={\"A\"}\n              src={\"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\"}\n            />\n            <DrumButton\n              keypad={\"S\"}\n              src={\"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\"}\n            />\n            <DrumButton\n              keypad={\"D\"}\n              src={\"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\"}\n            />\n            <DrumButton\n              keypad={\"Z\"}\n              src={\"https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3\"}\n            />\n            <DrumButton\n              keypad={\"X\"}\n              src={\"https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3\"}\n            />\n            <DrumButton\n              keypad={\"C\"}\n              src={\"https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3\"}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}